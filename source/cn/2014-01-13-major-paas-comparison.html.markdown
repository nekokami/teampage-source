---
title: 当前PaaS供应商的比较 ( 正文 )
date: 2014-01-13 06:11 UTC
lang: cn
tags:
---

####Abstract (概述)

2006年8月，亚马逊的EC2 (Elastic Cloud) Aplha上线了。从那时候开始一直到现在(2014年1月)，已经度过了将近八年时间。八年，对于高速发展的互联网和IT业来说是一段很长的时间，从2006年开始的8年中，发生了许许多多的事情：智能手机，平板的诞生。Android，iOS的迅猛发展。3G - 4G网络技术等的发展，等等。PaaS，( Platform as a Service - 软件作为服务的贩卖形式 )，也经历了八年的发展，不过潮起潮落，在同一个竞技场里的玩家在这八年当中却只有区区6家，超过5年的老玩家只有3家。这足以说明要运营、支撑一个面向全世界的SaaS服务并不容易。更值得一提的是，看成全球最大电商的阿里巴巴在2012年停止了其PaaS业务。PaaS的运营和管理有多困难，其系统有多复杂，可想而知。那么当前，如果想将自己的WebApp( 网络应用 )部署在PaaS上，作为开发者和公司有些什么选择呢？在这些平台之间又应该如何选择，如何进行比较，同时又存在一些什么价值陷阱？在未来的几年之中，这些PaaS又将在什么的驱动之下向何处发展？笔者，都将在接下去得文中详细陈述。

####Main Players (主要玩家)

当前，在[PaaS][1]的供应商中，有以下四家家主要玩家: Google App Engine, Heroku, Sina Application Engine, Parse.com

#####Heroku

Heroku作为云计算平台，于2007年诞生，其搭建在Amazon 的EC2上，故经常被人误认为是Amazon提供的PaaS服务。在其诞生初期，只支持PHP和Ruby。并且随着时间的增加，更多语言和解决方案登陆Heroku，使Heroku成为当前最成熟的PaaS之一。


#####Google Application Engine (GAE)

事实上云概念的真正普及者是Google Application Engine，在2008年之前，无论是Heroku还是EC2，都是在技术圈少数人在研究的东西，很少有一般人去涉足云计算开发的领域。一直到2008年，Google推出了Google Application Engine，让许多独立开发者和公司第一次接触到了云。同时，因为在Google Application Engine有大量的免费用量(Free Quota)，使得很多个人开发者蜂拥而至，在GAE上搭建博客，论坛等等。在创建初期，GAE只支持Python和Java两种语言。

#####新浪云计算平台 (Sina Application Engine)

始于2009年，新浪云计算跟进国外的脚步的速度还是很快的。在内测的时候就有PHP一种语言，之后又添加了Python和Java。新浪云计算的收费和Google Application Engine相似，收费标准在初期比GAE低很多，吸引了很多国内的开发者驻扎新浪云计算。到后期，还有一部分的大学，机构将主页托管于新浪云计算。从目前看来，国内运营的最好的PaaS是新浪云计算。

#####Parse (Facebook的Parse.com)

始于2012年三月，Parse.com是一种新的PaaS，虽说Parse.com和GAE，Heroku提供的服务很相似，但是他们却自称BaaS (Backend as a Service)，翻译成中文就是：

>	后端( 设备，程序，管理 )作为一种服务

笔者认为BaaS也可以归类在PaaS中，因为像Parse.com也是一个平台。本文的后面几个章节中，笔者还将说明BaaS和其他的PaaS有什么样的区别，以及利弊。

#####其他玩家

__阿里云__ : 阿里巴巴也有一个云计算平台，不过目前只有SaaS服务，即出售类似于VPS的虚拟机，其价格也和其他的虚拟机服务商没什么区别。阿里巴巴还有一个叫做ACE的PaaS，只是内测已经持续了两年，只有手持激活码的人才有机会体验。同时，阿里云还有租期一到立刻删除资料的情况，屡屡遭到业内朋友的讥讽。

__cnode__ : 曾经红极一时的NodeJS云计算平台，不过因为资金不足，在Node 0.8的时代就夭折了。

__百度云__ : 百度也有一个PaaS平台:BAE，目前支持PHP，Java，Python和Node.JS几种语言。它的最终API的调用方式和SAE十分相似，界面也有雷同之处。这个服务，在2013年12月16日开始处于免费测试阶段，未来前景不明。

__kinvy.com__ : 2012年2月推出的平台，主要面向移动应用的BaaS。意图在缩短制作移动应用的时间和成本。值得注意的是，Google Application Engine为kinvy提供运算资源。

####比较标准

在开始比较这些平台之前，最重要的必然是确定衡量这些平台好坏的标准了，笔者希望通过以下分类来对当前的云计算服务平台来进行分类和打分。

#####用户体验

作为平台提供商，给予使用平台的用户提供一个简单而有效的用户体验是非常重要的，在选择平台的过程中，笔者认为用户体验包含：收费方式，用户界面，用户文档，免费额度，部署方式以及开发环境。通常，开发者会根据以上几个因素的价值衡量，来选择适合他们的云计算平台。这几个标准当中的任何一个的条件太坏都会导致用户向其他平台的迁移，在最坏的条件下，用户甚至会选择向VPS转移。在这些条件之中，收费模式和免费额度为变量，用户会可能会根据其它平台的收费性进行函数式的选择。

*	__用户界面__ : 用户界通常被认为是一个次要因素，虽然平台体验对于用户来说是连续而整体的，但是界面的是否好用，是否对于友好，在其它的评判标准一致的情况下并不会被列入关键判断标准。举例来说，虽然Heroku的用户界面是HTML5，并且是响应式自适应的，其配色以及设计都让人感觉是经过精心设计的。Heroku的插件页面非常详细的罗列了插件的价格以及种类，同时收费标准也一目了然。用户在与Heroku的界面发生交互的时候，会自然产生对Heroku的粘性，并且更愿意留在Heroku。然而对于中国用户来说，因为线路问题，访问Heroku非常的缓慢，尽管Heroku的界面如此友好，但是不少用户，（主要是使用Python和PHP的用户)应该会舍弃界面的因素而考虑使用新浪云计算。当然，新浪云计算的用户界面和Heroku的对比起来，就缺乏设计感，显得苍白而古板。其MySQL数据库的管理界面居然直接使用PhpMyAdmin，虽然使用起来相当的熟悉，但是却让人颇为哭笑不得。除此之外，新浪提供的PhpMyAdmin还经常跳转到其它页面并且出错。如果不是因为网络速度这个特定的因素，也许很多用户会直接放弃使用新浪云计算。在国外的一些技术博客中，也有一些开发者声称自己因为Google Appliation Engine的界面太难看而转投Heroku。

*	__用户文档__ : 文档，对于开发者来说很重要。因为如果没有一个平台的详细API(Application Programming Interface)文档，那么开发者在其平台上的开发就回如同盲人摸象，通常会造成设计模式上的错误。并且这样的错误在发现的时候，基本上都会需要重构。因此，云计算平台的文档是否健全，是一个相当重要的评估因素。在上述的主要平台中，每一个平台都会定期更新开发文档，例如新浪云计算的开发文档就托管在[Github上面][2]。用户可以在Github的源界面中看到这个文档的更新履历。这样，文档的可信度就增加，用户一目了然。对比Google Application Engine和Heroku的文档，都只能说是中规中矩。毕竟，如果没有一个完整的文档，开发者在这样的云计算平台上将寸步难行。同时，值得注意的是，开发文档也能很好地体现当前这个平台真实情况，例如：在新浪云计算的Python文档中有[这样一句话][3]:

	>	Warning：本feature还在开发中，目前还很buggy。

	这句话，让笔者感到很恐慌：因为我们都知道目前新浪云计算还处于Beta测试阶段，的确会出现一些bug。但是"很buggy"这个形容词，却不能让用户知道 __1. Bug究竟在哪儿。__ __2. 这个Bug有多严重。__ __3. 什么时候这个Bug会被修复。__ 看到这句话的多数开发者应该不会去使用目前的syncdb功能去同步本地的开发数据到线上的数据库。这句话，让这个功能变得毫无意义。笔者认为，这对于一个PaaS来说是有点不负责任的。相比之下，Heroku和Google Application Engine的文档中就没有出现过类似的注解。在类似Parse.com和Kinvy.com这样的新兴平台中，就更不会出现这样的注解了。

*	__部署方式__ : 部署(Deploying)是一个很重要的环节，如何从开发环境(Development Environment)向生产环境(Production Envrionment)部署，这个过程与工程本身的版本控制有着很大的关联，如果部署过程的版本控制系统和开发者使用的版本控制系统有着比较大得差异，或者造成直接冲突，这对整个用户体验来说是一个重大的影响，成为用户向其他平台迁移的动力。比如说：Heroku的部署和版本控制是使用Git的，它的部署方式很简单：只需要在开发完成之后向本地代码库(Repo)中添加heroku的remote，然后`git push heroku master`，就能达到向生产环境部署的效果。同时，如果开发者想要在bitbucket.org或者github.com同样也保存代码，就会变得非常简单，他们只需要向本地开发的代码库添加不同的remote就可以达到目的，并且在推送的时候制定推送目标即可。

[1]: http://en.wikipedia.org/wiki/Platform_as_a_service "PaaS (Platform as a Service)是云计算服务的一种，其主要提供计算平台以及配套解决方案，并将其作为一种服务向顾客贩卖。"
[2]: https://github.com/sinacloud/sae-python-dev-guide/blob/master/docs/faq.rst "新浪云计算在Github上的文档repo"
[3]: http://sae-python.readthedocs.org/en/latest/quickstart.html#syncdb "Warning： 本feature还在开发中，目前还很buggy。"